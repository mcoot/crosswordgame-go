openapi: 3.1.0
info:
  title: Crossword Game
  description: Crossword Game
  version: 1.0.0
servers:
  - url: '/api/v1'
paths:
  /game:
    post:
      summary: Create a new game
      operationId: createGame
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: Location of the new game
              schema:
                type: string
                format: uri
  /game/{game_id}:
    get:
      summary: Get game state
      operationId: getGameState
      parameters:
        - name: game_id
          in: path
          required: true
          description: ID of the game
          schema:
            $ref: '#/components/schemas/GameId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameState'
        '404':
          description: Not Found
  /game/{game_id}/players/{player_id}:
    get:
      summary: Get player state
      operationId: getPlayerState
      parameters:
        - name: game_id
          in: path
          required: true
          description: ID of the game
          schema:
            $ref: '#/components/schemas/GameId'
        - name: player_id
          in: path
          required: true
          description: ID of the player
          schema:
            $ref: '#/components/schemas/PlayerId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerState'
        '404':
          description: Not Found
  /game/{game_id}/players/{player_id}/announce:
    post:
      summary: Announce a letter
      operationId: announceLetter
      parameters:
        - name: game_id
          in: path
          required: true
          description: ID of the game
          schema:
            $ref: '#/components/schemas/GameId'
        - name: player_id
          in: path
          required: true
          description: ID of the player
          schema:
            $ref: '#/components/schemas/PlayerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnounceRequest'
      responses:
        '200':
          description: Announced
        '400':
          description: Bad Request
  /game/{game_id}/players/{player_id}/place:
    post:
      summary: Place a letter
      operationId: placeLetter
      parameters:
        - name: game_id
          in: path
          required: true
          description: ID of the game
          schema:
            $ref: '#/components/schemas/GameId'
        - name: player_id
          in: path
          required: true
          description: ID of the player
          schema:
            $ref: '#/components/schemas/PlayerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceRequest'
      responses:
        '200':
          description: Placed
        '400':
          description: Bad Request
  /game/{game_id}/players/{player_id}/score:
    get:
      summary: Get player score
      operationId: getPlayerScore
      parameters:
        - name: game_id
          in: path
          required: true
          description: ID of the game
          schema:
              $ref: '#/components/schemas/GameId'
        - name: player_id
          in: path
          required: true
          description: ID of the player
          schema:
              $ref: '#/components/schemas/PlayerId'
      responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PlayerScore'
          '404':
            description: Not Found

components:
  schemas:
    GameState:
      type: object
      properties:
        game_id:
          $ref: '#/components/schemas/GameId'
        state:
          type: string
          enum:
            - awaiting_announcement
            - awaiting_placement
            - game_over
        player_count:
          type: integer
          minimum: 1
        squares_filled:
          type: integer
          minimum: 0
        current_announcing_player_id:
          $ref: '#/components/schemas/PlayerId'
    PlayerState:
      type: object
      properties:
        player_id:
          type: integer
          minimum: 0
        grid:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Letter'
    PlayerScore:
      type: object
      properties:
        player_id:
          $ref: '#/components/schemas/PlayerId'
        score:
          type: integer
          minimum: 0
    AnnounceRequest:
      type: object
      properties:
        letter:
          $ref: '#/components/schemas/Letter'
    PlaceRequest:
      type: object
      properties:
        row:
          type: integer
          minimum: 0
        column:
          type: integer
          minimum: 0
        letter:
          $ref: '#/components/schemas/Letter'
    GameId:
      description: ID of a game
      type: string
    PlayerId:
      description: ID of a player
      type: integer
      minimum: 0
    Letter:
      description: A single letter
      type: string
      maxLength: 1
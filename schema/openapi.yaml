openapi: 3.1.0
info:
  title: Crossword Game
  description: Crossword Game
  version: 1.0.0
paths:
  /api/v1/health:
    get:
      summary: Health check
      operationId: healthCheck
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/game:
    post:
      summary: Create a new game
      operationId: createGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameRequest'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: Location of the new game
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGameResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'
  /api/v1/game/{game_id}:
    get:
      summary: Get game state
      operationId: getGameState
      parameters:
        - name: game_id
          in: path
          required: true
          description: ID of the game
          schema:
            $ref: '#/components/schemas/GameId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameState'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/game/{game_id}/player/{player_id}:
    get:
      summary: Get player state
      operationId: getPlayerState
      parameters:
        - name: game_id
          in: path
          required: true
          description: ID of the game
          schema:
            $ref: '#/components/schemas/GameId'
        - name: player_id
          in: path
          required: true
          description: ID of the player
          schema:
            $ref: '#/components/schemas/PlayerId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerState'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/game/{game_id}/player/{player_id}/announce:
    post:
      summary: Announce a letter
      operationId: submitAnnouncement
      parameters:
        - name: game_id
          in: path
          required: true
          description: ID of the game
          schema:
            $ref: '#/components/schemas/GameId'
        - name: player_id
          in: path
          required: true
          description: ID of the player
          schema:
            $ref: '#/components/schemas/PlayerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnounceRequest'
      responses:
        '200':
          description: Announced
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnounceResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/game/{game_id}/player/{player_id}/place:
    post:
      summary: Place a letter
      operationId: submitPlacement
      parameters:
        - name: game_id
          in: path
          required: true
          description: ID of the game
          schema:
            $ref: '#/components/schemas/GameId'
        - name: player_id
          in: path
          required: true
          description: ID of the player
          schema:
            $ref: '#/components/schemas/PlayerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceRequest'
      responses:
        '200':
          description: Placed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/game/{game_id}/player/{player_id}/score:
    get:
      summary: Get player score
      operationId: getPlayerScore
      parameters:
        - name: game_id
          in: path
          required: true
          description: ID of the game
          schema:
              $ref: '#/components/schemas/GameId'
        - name: player_id
          in: path
          required: true
          description: ID of the player
          schema:
              $ref: '#/components/schemas/PlayerId'
      responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PlayerScore'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
  /api/v1/lobby:
    post:
      summary: Create a new lobby
      operationId: createLobby
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLobbyRequest'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: Location of the new lobby
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLobbyResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/lobby/{lobby_id}:
    get:
      summary: Get lobby state
      operationId: getLobbyState
      parameters:
          - name: lobby_id
            in: path
            required: true
            description: ID of the lobby
            schema:
              $ref: '#/components/schemas/LobbyId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLobbyStateResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/lobby/{lobby_id}/join:
    post:
      summary: Join a player into a lobby
      operationId: joinLobby
      parameters:
        - name: lobby_id
          in: path
          required: true
          description: ID of the lobby
          schema:
            $ref: '#/components/schemas/LobbyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinLobbyRequest'
      responses:
        '200':
          description: Joined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinLobbyResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/lobby/{lobby_id}/remove:
    post:
      summary: Remove a player from a lobby
      operationId: removeFromLobby
      parameters:
        - name: lobby_id
          in: path
          required: true
          description: ID of the lobby
          schema:
            $ref: '#/components/schemas/LobbyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveFromLobbyRequest'
      responses:
        '200':
          description: Removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveFromLobbyResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/lobby/{lobby_id}/attach:
    post:
      summary: Attach a game to a lobby
      operationId: attachGameToLobby
      parameters:
        - name: lobby_id
          in: path
          required: true
          description: ID of the lobby
          schema:
            $ref: '#/components/schemas/LobbyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachGameToLobbyRequest'
      responses:
        '200':
          description: Attached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachGameToLobbyResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/lobby/{lobby_id}/detach:
    post:
      summary: Detach a game from a lobby
      operationId: detachGameFromLobby
      parameters:
        - name: lobby_id
          in: path
          required: true
          description: ID of the lobby
          schema:
            $ref: '#/components/schemas/LobbyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetachGameFromLobbyRequest'
      responses:
        '200':
          description: Detached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetachGameFromLobbyResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/player/{player_id}/lobby:
    get:
      summary: Get the ID of the lobby the player is currently in
      operationId: getLobbyForPlayer
      parameters:
        - name: player_id
          in: path
          required: true
          description: ID of the player
          schema:
            $ref: '#/components/schemas/PlayerId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLobbyForPlayerResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        http_code:
          type: integer
        kind:
          type: string
        message:
          type: string
    HealthcheckResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - ok
        start_time:
          type: string
          format: date-time
      required:
        - start_time
    CreateGameRequest:
      type: object
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerId'
          minItems: 1
          maxItems: 5
        board_dimension:
          type: integer
          minimum: 1
          maximum: 10
          default: 5
      required:
        - players
    CreateGameResponse:
      type: object
      properties:
        game_id:
          $ref: '#/components/schemas/GameId'
      required:
        - game_id
    GameState:
      type: object
      properties:
        status:
          type: string
          enum:
            - awaiting_announcement
            - awaiting_placement
            - finished
        players:
          type: array
          items:
              $ref: '#/components/schemas/PlayerId'
        squares_filled:
          type: integer
          minimum: 0
        current_announcing_player_id:
          $ref: '#/components/schemas/PlayerId'
        current_announced_letter:
          $ref: '#/components/schemas/Letter'
      required:
        - status
        - players
        - squares_filled
        - current_announcing_player_id
    PlayerState:
      type: object
      properties:
        board:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Letter'
      required:
        - board
    PlayerScore:
      type: object
      properties:
        total_score:
          $ref: '#/components/schemas/ScoreValue'
        words:
          type: array
          items:
            $ref: '#/components/schemas/ScoredWord'
      required:
        - total_score
        - words
    ScoredWord:
      type: object
      properties:
        word:
          type: string
        direction:
          type: string
          enum:
            - horizontal
            - vertical
        start_row:
          type: integer
          minimum: 0
        start_column:
          type: integer
          minimum: 0
        score:
          $ref: '#/components/schemas/ScoreValue'
      required:
        - word
        - direction
        - start_row
        - start_column
        - score
    ScoreValue:
      type: integer
      minimum: 0
    AnnounceRequest:
      type: object
      properties:
        letter:
          $ref: '#/components/schemas/Letter'
      required:
        - letter
    AnnounceResponse:
      type: object
    PlaceRequest:
      type: object
      properties:
        row:
          type: integer
          minimum: 0
        column:
          type: integer
          minimum: 0
      required:
        - row
        - column
    PlaceResponse:
      type: object
    GameId:
      description: ID of a game
      type: string
    PlayerId:
      description: ID of a player
      type: string
    Letter:
      description: A single letter
      type: string
      maxLength: 1
    CreateLobbyRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    CreateLobbyResponse:
      type: object
      properties:
        lobby_id:
          $ref: '#/components/schemas/LobbyId'
      required:
        - lobby_id
    GetLobbyStateResponse:
      type: object
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerId'
        game_id:
          $ref: '#/components/schemas/GameId'
      required:
        - players
    JoinLobbyRequest:
      type: object
      properties:
        player_id:
          $ref: '#/components/schemas/PlayerId'
      required:
        - player_id
    JoinLobbyResponse:
      type: object
    RemoveFromLobbyRequest:
      type: object
      properties:
        player_id:
          $ref: '#/components/schemas/PlayerId'
      required:
        - player_id
    RemoveFromLobbyResponse:
      type: object
    AttachGameToLobbyRequest:
      type: object
      properties:
        game_id:
          $ref: '#/components/schemas/GameId'
      required:
        - game_id
    AttachGameToLobbyResponse:
      type: object
    DetachGameFromLobbyRequest:
      type: object
    DetachGameFromLobbyResponse:
      type: object
    GetLobbyForPlayerResponse:
      $ref: '#/components/schemas/GetLobbyStateResponse'
    LobbyId:
      description: ID of a lobby
      type: string
package layout

import (
    "fmt"

    lobbytypes "github.com/mcoot/crosswordgame-go/internal/lobby/types"
    "github.com/mcoot/crosswordgame-go/internal/api/webapi/rendering"
)

templ nav(currentPlayerLobby *lobbytypes.Lobby) {
    <nav class="flex gap-4 mb-4 p-2 border-b border-gray-200">
        <a href="/index" class="text-blue-600 hover:text-blue-800 font-medium">Home</a>
        if currentPlayerLobby != nil {
            <a href={templ.URL(fmt.Sprintf("/lobby/%s", currentPlayerLobby.Id))}>Lobby</a>
        }
        <a href="/about" class="text-blue-600 hover:text-blue-800 font-medium">About</a>
    </nav>
}

templ pageContent(currentPlayerLobby *lobbytypes.Lobby) {
    if currentPlayerLobby != nil {
        <div id="page-content" hx-ext="sse" sse-connect={fmt.Sprintf("/lobby/%s/sse/refresh", currentPlayerLobby.Id)}>
            { children... }
        </div>
    } else {
        <div id="page-content">
            { children... }
        </div>
    }
}

templ mainDivContents() {
    @nav(rendering.GetCurrentPlayerLobby(ctx))
    @pageContent(rendering.GetCurrentPlayerLobby(ctx)) {
        { children... }
    }
}

templ fullDocument() {
    <!DOCTYPE html>
    <html lang="en">
        <head>
            <title>Crossword Game</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <link rel="stylesheet" href="/static/styles/main.css"/>
        </head>
        <body class="bg-gray-100 min-h-screen">
            <script src="/static/scripts/vendored/htmx.org-2.0.4.min.js"></script>
            <script src="/static/scripts/vendored/htmx-ext-response-targets-2.0.2.js"></script>
            <script src="/static/scripts/vendored/htmx-ext-sse-2.2.2.js"></script>
            <div
                hx-ext="response-targets,sse"
                id="main"
                class="bg-white mx-auto w-full md:max-w-3xl p-6 min-h-screen prose prose-slate max-w-none shadow-lg"
            >
                @mainDivContents() {
                    { children... }
                }
            </div>

        </body>
    </html>
}

templ Layout() {
    switch rendering.GetRenderContext(ctx).Target.RefreshTarget {
    case rendering.RefreshTargetNone:
        @fullDocument() {
            { children... }
        }
    case rendering.RefreshTargetMain:
        @mainDivContents() {
            { children... }
        }
    default:
        { children... }
    }
}
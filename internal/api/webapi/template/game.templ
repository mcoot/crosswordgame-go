package template

import "fmt"
import "strconv"
import lobbytypes "github.com/mcoot/crosswordgame-go/internal/lobby/types"
import gametypes "github.com/mcoot/crosswordgame-go/internal/game/types"
import playertypes "github.com/mcoot/crosswordgame-go/internal/player/types"

func cellLetter(letter string) string {
    if letter == "" {
        return "âˆ…"
    }
    return letter
}

templ cellFormContents(letter string, row int, column int, placementEnabled bool) {
    <input type="hidden" name="placement_row" value={ strconv.Itoa(row) }>
    <input type="hidden" name="placement_column" value={ strconv.Itoa(column) }>
    <input type="submit" value={ cellLetter(letter) }
        if !placementEnabled {
            disabled
        }/>
}

templ Board(
    lobbyId lobbytypes.LobbyId,
    viewingPlayer *playertypes.Player,
    board *gametypes.Board,
    placementEnabled bool,
) {
    <h3>Your ({ viewingPlayer.DisplayName }'s) board</h3>
    <div class="cwg-board">
    <table>
        <tbody>
        for r, row := range board.Data {
            <tr>
            for c, cell := range row {
                <td>
                <form
                    id={ fmt.Sprintf("placement-%d-%d-form", r, c) }
                    action={ templ.URL(fmt.Sprintf("/lobby/%s/place", lobbyId)) } method="post"
                    hx-post={ fmt.Sprintf("/lobby/%s/place", lobbyId) }
                    hx-target="#page-content" hx-target-error="#board-error-div"
                >
                @cellFormContents(cell, r, c, placementEnabled)
                </form>
                </td>
            }
            </tr>
        }
        </tbody>
    </table>
    <div id="board-error-div"></div>
    </div>
}

templ announcementFormContents() {
    <label for="announced_letter">Letter to announce:</label>
    <input type="text" name="announced_letter" placeholder="Letter to announce" />
    <input type="submit" value="Announce" />
}

templ AnnouncementForm(lobbyId lobbytypes.LobbyId) {
    @CommonForm("announcement-form", fmt.Sprintf("/lobby/%s/announce", lobbyId), announcementFormContents())
}

templ gameHeader(game *gametypes.Game) {
    <h2>Game: { string(game.Id) }</h2>
}

templ gameStatus(game *gametypes.Game, players []*playertypes.Player, viewingPlayer *playertypes.Player) {
    <div>
    <h3>In game:</h3>
    @playerList(players, viewingPlayer)
    <p>Status: { string(game.Status) }</p>
    </div>
}

templ Game(
    game *gametypes.Game,
    players []*playertypes.Player,
    viewingPlayer *playertypes.Player,
    boardComponent templ.Component,
) {
    <div class="cwg-game">
    @gameHeader(game)
    @gameStatus(game, players, viewingPlayer)
    @boardComponent
    </div>
}